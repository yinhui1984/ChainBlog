[{"content":"[Golang] 使用overseer实现APP重启 前两天在一个项目中需要实现这样一个功能\u0026quot;点击一个按钮或通过API来重启后台服务\u0026quot;\n发现Github上有一个叫overseer的模块, 试用了一下,效果还不错\n使用方法很简单\npackage main  import ( \t\u0026#34;fmt\u0026#34; \t\u0026#34;github.com/jpillora/overseer\u0026#34; \t\u0026#34;time\u0026#34; )  func main() { \toverseer.Run(overseer.Config{ \tProgram: app, \t}) }  func app(overseer.State) {  \tfmt.Println(\u0026#34;app started : \u0026#34; + time.Now().Format(\u0026#34;2022-01-02 03:04:05 pm\u0026#34;))  \tfmt.Println(\u0026#34;Hello, 回车键重启APP\u0026#34;)  \tfmt.Scanln()  \toverseer.Restart() } 项目地址: https://github.com/jpillora/overseer\n其README中介绍了如何使用这个模块来优雅地进行自我升级.\n","permalink":"/posts/golang_overseer_restart_app/","summary":"[Golang] 使用overseer实现APP重启 前两天在一个项目中需要实现这样一个功能\u0026quot;点击一个按钮或通过API来重启后台服务\u0026quot;\n发现Github上有一个叫overseer的模块, 试用了一下,效果还不错\n使用方法很简单\npackage main  import ( \t\u0026#34;fmt\u0026#34; \t\u0026#34;github.com/jpillora/overseer\u0026#34; \t\u0026#34;time\u0026#34; )  func main() { \toverseer.Run(overseer.Config{ \tProgram: app, \t}) }  func app(overseer.State) {  \tfmt.Println(\u0026#34;app started : \u0026#34; + time.Now().Format(\u0026#34;2022-01-02 03:04:05 pm\u0026#34;))  \tfmt.Println(\u0026#34;Hello, 回车键重启APP\u0026#34;)  \tfmt.Scanln()  \toverseer.Restart() } 项目地址: https://github.com/jpillora/overseer\n其README中介绍了如何使用这个模块来优雅地进行自我升级.","title":"[Golang] 使用overseer实现APP重启"},{"content":"第1步：在Github上新建一个项目 登录你的Github账号，按照向导 新建一个 Repository\n假设你新建的Repo为： https://github.com/yourUserName/MyBlog.git\n第2步： Clone项目到本地并尝试push git clone https://github.com/yourUserName/MyBlog.git 尝试新建一个文件和push\ncd MyBlog git init touch index.html echo \u0026#34;hi\u0026#34; \u0026gt;\u0026gt; index.html git add index.html git commit -m \u0026#34;add index.html\u0026#34; git branch -M main git remote add origin https://github.com/yourUserName/MyBlog.git git push -u origin main 尝试提交的时候，会让你输入github账号和token（gitbub弃用了密码登录，而是使用token）\n如果你还没有生成过token，可以到Github你账户下的settings -\u0026gt; Developer settings 下生成token\n第3步：使用hugo自动生成静态网站  安装hugo  brew install hugo   按照官方教程新建一个网站 官方教程： https://gohugo.io/getting-started/quick-start/\n假设你的网站名称叫MySite\n  编译你的网站 hugo -D ，编译出来的静态网页的全部内容在MySite/public目录下\n  在本地运行试试 hugo server -D , 不出意外，你应该能在http://localhost:1313上看到你的站点\n  第4步：使用 fleek来将其自动部署到IPFS上   关联Github repo和fleek\n按照https://docs.ipfs.io/how-to/websites-on-ipfs/introducing-fleek/#host-a-site 教程一步步地将你的Github项目，也就是上面的MyBlog.git和fleek项目关联起来，这样，但你的git有更新后，fleek会将你的内容自动部署到IPFS上\nfleek给你的临时子域名，就在项目的下方，类似 xxxxxx.on.fleek.co , 你可以跳过教程中的Domain names一节\n  将hugo编译出的public下所有内容复制到本地的MyBlog下\n然后进行push\ncd MySite hugo -D cp -rf ./public/ ../MyBlog/ cd ../MyBlog git add . git commit -m \u0026#34;your comments\u0026#34; git push origin main push成功后，稍等2分钟，让fleek自动拉取你最新的内容并重新部署\n  第5步 makefile 我们使用makefile来让新建Blog文章、测试和发布显得自动化一些\ncd MySite touch Makefile vim Makefile 在Makefile中加入类似下面的内容：\nall: \thugo -D \ttest: # To ignore errors in a command line, # write a - at the beginning of the line\u0026#39;s text (after the initial tab). # The - is discarded before the command is passed to the shell for execution \t-killall -9 hugo \thugo server -D \u0026amp; \tsleep 2 \topen http://localhost:1313/ \trelease: \thugo -D \tcp -rf ./public/ ../MyBlog/ \tcd ../MyBlog/ \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026#34;auto updated by script\u0026#34; \u0026amp;\u0026amp; git push origin main \t##how to use: # make new file=this_is_one_article.md new: \thugo new posts/$(file) \topen ./content/posts/$(file) \u0026amp; 大功告成 ","permalink":"/posts/how_to_create_this_blog/","summary":"第1步：在Github上新建一个项目 登录你的Github账号，按照向导 新建一个 Repository\n假设你新建的Repo为： https://github.com/yourUserName/MyBlog.git\n第2步： Clone项目到本地并尝试push git clone https://github.com/yourUserName/MyBlog.git 尝试新建一个文件和push\ncd MyBlog git init touch index.html echo \u0026#34;hi\u0026#34; \u0026gt;\u0026gt; index.html git add index.html git commit -m \u0026#34;add index.html\u0026#34; git branch -M main git remote add origin https://github.com/yourUserName/MyBlog.git git push -u origin main 尝试提交的时候，会让你输入github账号和token（gitbub弃用了密码登录，而是使用token）\n如果你还没有生成过token，可以到Github你账户下的settings -\u0026gt; Developer settings 下生成token\n第3步：使用hugo自动生成静态网站  安装hugo  brew install hugo   按照官方教程新建一个网站 官方教程： https://gohugo.io/getting-started/quick-start/\n假设你的网站名称叫MySite\n  编译你的网站 hugo -D ，编译出来的静态网页的全部内容在MySite/public目录下\n  在本地运行试试 hugo server -D , 不出意外，你应该能在http://localhost:1313上看到你的站点","title":"如何利用IFPS创建这个博客"},{"content":"关于这个BLOG： 这个BLOG的所有内容均存储在IPFS链上。\n同时在Github上也有对应副本： https://github.com/jack0x001/ChainBlog.git 。\n我使用了gohugo来自动生成网站 并使用 fleek来将其自动部署到IPFS上， 这样我就可以将精力放在网站内容本身上了。\n","permalink":"/posts/welcome/","summary":"关于这个BLOG： 这个BLOG的所有内容均存储在IPFS链上。\n同时在Github上也有对应副本： https://github.com/jack0x001/ChainBlog.git 。\n我使用了gohugo来自动生成网站 并使用 fleek来将其自动部署到IPFS上， 这样我就可以将精力放在网站内容本身上了。","title":"Welcome"}]