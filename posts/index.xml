<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Zhouyinhui&#39;s Space</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Zhouyinhui&#39;s Space</description>
    <image>
      <url>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 10 Jun 2022 13:30:39 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Golang]goroutings本质</title>
      <link>/posts/golang_goroutings_under_the_hood/</link>
      <pubDate>Fri, 10 Jun 2022 13:30:39 +0800</pubDate>
      
      <guid>/posts/golang_goroutings_under_the_hood/</guid>
      <description>原文: https://osmh.dev/posts/goroutines-under-the-hood
简介 Go从2012年开始出现，开发人员开始认识到它的强大，并慢慢过渡到用Go开发他们的项目。它在 &amp;ldquo;现代企业 &amp;ldquo;中变得非常流行，原因有很多，其中之一是它真的很容易学习和使用，而且能产生更干净的代码！特别是如果你有C++的背景。但这并不是许多开发者支持它的唯一原因。其他原因包括它的编译和执行速度有多快，它如何通过提供自己预设的代码风格标准来提高代码的可维护性和可读性，最重要的是，它处理并发的方式
现在让我们来关注一下go真正的特别之处，go处理并发的方式使多线程应用程序的工作速度快得惊人！但是在深入挖掘go是如何工作的之前，我们先来看看go是如何工作的。但在深入了解它是如何做到这一点的之前，让我们向后退一步，解释一下什么是并发性，什么是线程？
如果你已经了解了并发性、并行性和线程，请随意跳到goroutines部分。
并发与并行 维基百科对并发的定义是&amp;hellip;&amp;hellip;开玩笑，如果你从来没有听说过并发，那么维基百科对它的定义反而会把你吓跑。简而言之，并发性允许程序在同一时间处理多个事物。还需要提到的是，它并不一定意味着在CPU层面上同时处理多个任务。但尽管如此，它还是同时处理它们，现在让我们来解释一下这意味着什么，下面的内容可能对每一个使用案例都不是100%正确的，因为一些CPU或操作系统在内部有不同的操作方式。我也会暂时忽略一些技术细节，比如线程，以使其更容易理解（我将使用 &amp;ldquo;任务 &amp;ldquo;一词而不是 &amp;ldquo;线程&amp;rdquo;），并在以后进行解释。但整体过程应该不会有太大差别。
单核CPU的并发性 CPU要么有单核，要么有多核，为了简单起见，让我们先解释一下单核CPU的并发工作原理，然后再理解多核CPU的工作原理应该是小菜一碟了。在单核CPU上，单核（处理器）可能会欺骗你，让你以为它在同时执行多个任务，而事实上发生的情况是，处理器中的任务执行是重叠的，这意味着每个任务在处理器上都有一个时间窗口来运行，然后它将被另一个任务取代，在该处理器上执行。
换句话说，如果我们有任务 &amp;ldquo;A&amp;rdquo;，&amp;ldquo;B&amp;rdquo;，处理器可能首先分配给任务 &amp;ldquo;A &amp;ldquo;5微秒的时间来执行，然后即使任务A需要更多的时间来完成，它也会告诉任务 &amp;ldquo;B &amp;ldquo;来接管并做它需要的计算，比方说再5微秒。最后，当任务 &amp;ldquo;B &amp;ldquo;执行完毕后，任务 &amp;ldquo;A &amp;ldquo;可以再次开始处理5微秒的时间。由于它是在几乎没有时间（微秒）的情况下执行的，作为人类的你甚至不会注意到这些进程是重叠的，或者是一个接一个地执行的。它们会在屏幕上出现，好像它们是在同一时间运行的。而事实上，处理器一直在不同的时间窗口运行不同的任务，以实现并发。正如我们前面所描述的，处理器允许任务共享以处理它们需要的计算。内核层面的并发性是操作系统（operating system）调度器的责任，它是一个处理器依靠的程序来实现所有这些。
多核CPU上的并发性和并行性 现在，多核CPU的情况如何？由于多核（多处理器）基础设施的存在，CPU现在可以在同一时间运行多个任务。这意味着它可以让多个任务在不同的处理器上同时运行。现在你可能想知道 &amp;ldquo;这是否意味着我们不再需要并发性了？&amp;ldquo;答案是否定的，这并不意味着并发性 &amp;ldquo;不再&amp;rdquo;。并发和并行是两件完全不同的事情。并发可能还会存在于多核CPU上，使其更加高效。现在你明白了并发性在单核CPU上是如何工作的。试想一下，同样的事情在每一个处理器上都会发生。这是因为每个处理器/内核都运行着我们前面谈到的操作系统调度器的一个实例。这使得处理器上的并发性得以实现。这里有一些图片，可以更好地解释这个问题，但是不要被并发性的演示所迷惑，就好像它只在一个处理器上运行，而这些进程在共享处理器。只要想象一下，它对CPU上存在的每一个处理器都做了下面图片上演示的同样的事情。
编程语言有不同的方法来处理并发性, 如果它被语言支持的话。但这不是我们的主题，如果你有兴趣了解更多关于什么是并发的知识，我真的建议你去买Abraham Silberschatz、Peter Baer Galvin和Greg Gagne的《操作系统概念》这本书。它解释了所有这些概念以及其他有趣的东西。
什么是线程？ 在上一节中，我们谈到了任务是如何分享处理器以运行一些计算的。事实是，任务甚至不能访问处理器，也不能直接使用它们。他们利用线程，而线程可以访问处理器。
我所能找到的关于线程的最好的定义是Stackoverflow的pwnall。
线程是一个执行环境，它是CPU执行指令流所需的所有信息。
假设你正在阅读一本书，你现在想休息一下，但你希望能够回来，并从你停止的确切位置继续阅读。实现这一目标的方法之一是记下页码、行数和字数。所以你阅读一本书的执行背景就是这3个数字。
如果你有一个室友，而她也在使用同样的技巧，她可以在你不使用这本书的时候拿走这本书，并从她停止的地方继续阅读。然后你可以把它拿回来，从你原来的地方继续读。
线程的工作方式也是如此。一个CPU给你的错觉是它在同时进行多个计算。它通过在每个计算上花费一点时间来做到这一点。它之所以能做到这一点，是因为它为每个计算都有一个执行环境。就像你可以和你的朋友分享一本书一样，许多任务可以分享一个CPU。
在更多的技术层面上，一个执行环境（因此是一个线程）由CPU的寄存器的值组成。
每个线程都有自己独立的上下文，你甚至可以把一个多线程的程序看作是独立的程序，它们共同组成了一个更大的程序。这里有一张图，也许能帮助你直观地了解这一点。
单线程进程一次只能运行一个任务，而多线程进程可以同时运行N个任务。
线程的创建和管理有不同的方式或模式，可以这么说。一对一、多对一和多对多的模式。这基本上是用户（应用程序级别）线程和内核（操作系统级别）线程之间的映射。
Gorouting: Go处理并发问题的方式 开发人员喜欢Go的原因之一是用它来实现并发性是多么容易和有效。这是该语言固有的一部分。Goroutines利用了一个已经存在了一段时间的概念，叫做 &amp;ldquo;coroutines&amp;rdquo;，本质上意味着将一组独立执行的函数 &amp;ldquo;coroutines &amp;ldquo;复用到操作系统层面的一组实际线程上，这些线程运行在用户层面(用户空间)。这就是使coroutines具有难以置信的效率的原因。你可能想知道为什么？因为当一个程序阻塞时&amp;ndash;有些进程会因为很多原因导致线程阻塞&amp;ndash;比如调用一个阻塞的系统调用（比如从用户那里读取输入），运行时就会自动将同一操作系统线程上阻塞的程序后面排队的其他程序转移到不同的、可运行的线程，这样它们就不会被阻塞。这在一开始可能会有点让人难以消化，所以让我们用一个例子来证明。
  首先，我们假设我们有4个goroutines需要被复用到内核级线程上，以便得到执行。我们还假设我们只需要两个内核级线程。而且我们有一个单一的处理器。   现在让我们假设Go的运行时调度器决定将goroutines像这样（出于任何原因）突击到线程上。goroutine A和B将使用左边的内核线程运行，goroutine B和C将使用右边的线程运行。我们还假设goroutines将分别运行，从放置在goroutines池底部的goroutines开始，用环绕它们的边框演示。
  goroutines程序开始运行。但是，等等。&amp;ldquo;A &amp;ldquo;调用了一个阻塞的系统调用（例如read()语句）现在goroutine A是阻塞的，goroutine B也被阻塞了。   goroutine C 执行完毕   Go的运行时调度器现在也许会意识到，把goroutine B移到另一个可运行的线程上会是一个更好的主意，而不是永远等待goroutine A完成。   goroutine D 执行完毕   Goroutine B现在也完成了，而左边被Goroutine A占据的内核线程仍在阻塞中。   如果运行时调度器从不关心将阻塞的goroutines重新安排到另一个可运行的线程，那么goroutine B到现在也不会完成执行!</description>
    </item>
    
    <item>
      <title>[Golang]Http Server</title>
      <link>/posts/golang_http_server/</link>
      <pubDate>Mon, 06 Jun 2022 10:04:12 +0800</pubDate>
      
      <guid>/posts/golang_http_server/</guid>
      <description>简单的文件服务器 package main  import ( 	&amp;#34;log&amp;#34; 	&amp;#34;net/http&amp;#34; )  func main() { 	err := http.ListenAndServe(&amp;#34;:8080&amp;#34;, http.FileServer(http.Dir(&amp;#34;.&amp;#34;))) 	if err != nil { 	log.Fatal(err) 	} } 上面这个例子创建了一个以当前目录为站点跟目录的文件服务器, 我一般用这个来作为局域网文件共享.
然后写一个函数放到bash.rc 或zshrc中
#文件服务器 function fileserver(){ 	echo &amp;#34;start file server :12345&amp;#34; 	cat &amp;lt;&amp;lt;EOF | tee /tmp/fileserver.go | go run /tmp/fileserver.go package main import ( &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { err := http.ListenAndServe(&amp;#34;:12345&amp;#34;, http.FileServer(http.Dir(&amp;#34;.&amp;#34;))) if err !</description>
    </item>
    
    <item>
      <title>[Golang]聊聊sync</title>
      <link>/posts/go_talk_about_sync/</link>
      <pubDate>Thu, 02 Jun 2022 09:43:29 +0800</pubDate>
      
      <guid>/posts/go_talk_about_sync/</guid>
      <description>我们将用些简单的例子来尝试golang中sync包的各种有趣的情况
一个简单的DEMO package main  import &amp;#34;fmt&amp;#34;  var ( 	sharedCounter = 0 )  func add(count int) { 	for i := 0; i &amp;lt; count; i++ { 	sharedCounter++ 	} }  func sub(count int) { 	for i := 0; i &amp;lt; count; i++ { 	sharedCounter-- 	} }  func show() { 	fmt.Println(sharedCounter) }  func main() { 	add(1000000) 	sub(1000000) 	show() } 程序很简单, 我们用一个共享变量sharedCounter作为一个计数器.</description>
    </item>
    
    <item>
      <title>[Golang] 使用overseer实现APP重启</title>
      <link>/posts/golang_overseer_restart_app/</link>
      <pubDate>Mon, 30 May 2022 10:29:19 +0800</pubDate>
      
      <guid>/posts/golang_overseer_restart_app/</guid>
      <description>前两天在一个项目中需要实现这样一个功能&amp;quot;点击一个按钮或通过API来重启后台服务&amp;quot;
发现Github上有一个叫overseer的模块, 试用了一下,效果还不错
使用方法很简单
package main  import ( 	&amp;#34;fmt&amp;#34; 	&amp;#34;github.com/jpillora/overseer&amp;#34; 	&amp;#34;time&amp;#34; )  func main() { 	overseer.Run(overseer.Config{ 	Program: app, 	}) }  func app(overseer.State) {  	fmt.Println(&amp;#34;app started : &amp;#34; + time.Now().Format(&amp;#34;2006-01-02 03:04:05 pm&amp;#34;))  	fmt.Println(&amp;#34;Hello, 回车键重启APP&amp;#34;)  	_, _ = fmt.Scanln()  	overseer.Restart() } 项目地址: https://github.com/jpillora/overseer
其README中介绍了如何使用这个模块来优雅地进行自我升级.</description>
    </item>
    
    <item>
      <title>如何利用IFPS创建这个博客</title>
      <link>/posts/how_to_create_this_blog/</link>
      <pubDate>Mon, 27 Dec 2021 19:29:39 +0800</pubDate>
      
      <guid>/posts/how_to_create_this_blog/</guid>
      <description>第1步：在Github上新建一个项目 登录你的Github账号，按照向导 新建一个 Repository
假设你新建的Repo为： https://github.com/yourUserName/MyBlog.git
第2步： Clone项目到本地并尝试push git clone https://github.com/yourUserName/MyBlog.git 尝试新建一个文件和push
cd MyBlog git init touch index.html echo &amp;#34;hi&amp;#34; &amp;gt;&amp;gt; index.html git add index.html git commit -m &amp;#34;add index.html&amp;#34; git branch -M main git remote add origin https://github.com/yourUserName/MyBlog.git git push -u origin main 尝试提交的时候，会让你输入github账号和token（gitbub弃用了密码登录，而是使用token）
如果你还没有生成过token，可以到Github你账户下的settings -&amp;gt; Developer settings 下生成token
第3步：使用hugo自动生成静态网站  安装hugo  brew install hugo   按照官方教程新建一个网站 官方教程： https://gohugo.io/getting-started/quick-start/
假设你的网站名称叫MySite
  编译你的网站 hugo -D ，编译出来的静态网页的全部内容在MySite/public目录下
  在本地运行试试 hugo server -D , 不出意外，你应该能在http://localhost:1313上看到你的站点</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>/posts/welcome/</link>
      <pubDate>Fri, 24 Dec 2021 12:52:54 +0800</pubDate>
      
      <guid>/posts/welcome/</guid>
      <description>The first article.</description>
    </item>
    
  </channel>
</rss>
